/**
 * @preserve
 * @module wheeling
 * @copyright Lcf.vs 2022
 * @licence MIT
 * @link https://github.com/Lcfvs/wheeling
 */
const t=[],e=new WeakMap,n=(e,n)=>t.unshift([e,n]),o=async(...t)=>Promise.race(t),s=()=>{const o=new Promise(n);return e.set(o,t.shift()),o},a=(t,n)=>{const o=e.get(t)[n];return e.delete(t),o},i=(t,e)=>a(t,0)(e),r=(t,e)=>a(t,1)(e),c=async t=>{const e={};return await o(t,e)===e},f=async function(t){const{forget:e,hooks:n,input:o,options:i}=this,{once:r}=i,c=s();let f;for(const s of n)f=s(t,c)??f;if(r&&e(),f!==c)return void await o.next({event:t});const[l,u]=a(c);await o.next({event:t,resolve:l,reject:u})},l=async function*(t,e,n,s,a){const i=e.get(s);try{for(;await c(t);){if(!i.length){const s=o(t,a.next());for(const t of n)e.get(t).push(s)}const{done:s,value:r}=await o(t,i.shift());if(s)break;yield r}}catch{}finally{n.delete(s),e.delete(s)}},u=(t,e)=>(t.waitUntil(e),e),y=t=>t.preventDefault(),h=(t,e)=>(t.respondWith(e),e),p=t=>t.stopImmediatePropagation(),w=t=>t.stopPropagation(),d=!0,g=!0,k=!0,v=new WeakMap,W=(t,[...e])=>{for(const n of e)queueMicrotask((async()=>{for await(const t of n);}))},m=function(t,e,n=2){const o=[],s=new Set(Array.from({length:n},Object)),a=new WeakMap,i=async function*(t){yield*t}(e);for(const r of s)a.set(r,[]),o.push(l(t,a,s,r,i));return o},M=()=>{const t=s();return v.set(t,new WeakMap),t},x=t=>{const e=[s(),s()],n=async function*(t,e){try{for(;e.length;){const[n,a]=e;await o(t,a),e.splice(0,2,s(),s()),i(n,yield)}}catch{}}(t,e),a=async function*(t,e){try{for(;e.length;){const[n,s]=e;i(s),yield o(t,n)}}catch{}finally{e.length&&r(e.at(-1))}}(t,e);return n.next(),[n,a]},E=async function*(t,e,n){const o=v.get(t);o.has(e)||o.set(e,new WeakMap);const s=o.get(e);if(s.has(n))throw new Error("Duplicate event listening");const{hooks:[...a]=[],type:i,...r}=n,c=new WeakRef(e),[l,u]=x(t),y=()=>{c.deref()?.removeEventListener(i,p,r),s.delete(n),l.return()},h=new FinalizationRegistry(y),p={forget:y,input:l,handleEvent:f,hooks:a,options:r};h.register(e,null),s.set(n,p),e.addEventListener(i,p,r);try{yield*u}finally{y()}},P=async function*(t,e,n){const[o]=m(t,e,1);for await(const s of o)yield n(s)??s},b=t=>{r(t),v.delete(t)};export{W as add,u as awaitUntil,d as capture,m as fork,M as init,x as io,E as listen,g as once,k as passive,y as preventDefault,h as respondWith,b as revoke,p as stopImmediatePropagation,w as stopPropagation,P as task};
//# sourceMappingURL=wheeling.min.js.map
