/**
 * @module wheeling
 * @copyright Lcf.vs 2022
 * @licence MIT
 * @see {@link https://github.com/Lcfvs/wheeling}
 * @preserve
 */
let e;const{assign:t,create:s,freeze:r}=Object,o=new WeakMap,n=(e=null,...t)=>r(i(e,...t)),i=(e=null,...r)=>t(s(e),...r),a=e=>e,l=(t,s)=>e={reject:s,resolve:t},c=()=>[new Promise(l),e],f=function(e){const{hooks:[...t]=[],resolvers:s}=this,[,{resolve:r}]=s.at(-1),[o,n]=c();let a;for(const i of t)a=i(e,o)??a;r(i(null,{event:e},a&&n)),s.push(c())},h=n(null,{async*listen(e,t,s=a){const{capture:r,once:i,passive:l,type:h}=t,u={capture:r,once:i,passive:l},p=[c()],v=n(t,{handleEvent:f,resolvers:p}),d=o.get(this),{listeners:y}=d;y.has(t)||y.set(t,new WeakSet);const k=y.get(t);if(k.has(e))throw new Error("Duplicate event listening");k.add(e),e.addEventListener(h,v,u);try{for(;;){const[[e]]=p,t=[o.get(this).promise,e],r=await Promise.race(t);if(!o.has(this))break;if(yield await s(r)??r,p.shift(),p.length||p.push(c()),i)break}}finally{e.removeEventListener(h,v,u),k.delete(e)}},add([...e]){const{iterator:t}=o.get(this);for(const s of e)t.next(s);return this},async*of(e,t=a){try{for await(const s of e)yield t(s)??s}finally{e.return?.()}},revoke(){const e=o.get(this);if(e){const{iterator:t,resolve:s}=e;s(),t.return(),o.delete(this)}}}),u=(e,t)=>(queueMicrotask((async()=>{for await(const s of t)if(!o.get(e))break})),t),p=({hooks:[...e]=[],...t})=>n(null,{hooks:r(e),...t}),v=()=>{const e=n(h),t=function*(e){const t=[];try{for(;t.push(u(e,yield)););}finally{for(const e of t)e.return()}}(e),s=new WeakMap,[r,{resolve:i,reject:a}]=c(),l={iterator:t,listeners:s,promise:r,reject:a,resolve:i};return o.set(e,l),t.next(),r.catch((t=>{throw e.revoke(),t})),e},d=(e,t)=>(e.waitUntil(t),t),y=e=>e.preventDefault(),k=(e,t)=>(e.respondWith(t),t),w=e=>e.stopImmediatePropagation(),g=e=>e.stopPropagation(),m=!0,b=!0,j=!0;export{p as listener,v as init,d as awaitUntil,y as preventDefault,k as respondWith,w as stopImmediatePropagation,g as stopPropagation,m as capture,b as once,j as passive};
//# sourceMappingURL=./wheeling.min.js.map